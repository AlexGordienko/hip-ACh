// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// stimuli/0%_similarity/test_ab_ps.tsv
// stimuli/0%_similarity/train_ab_ps.tsv
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stimuli0_similarityTest_ab_psTsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\xd6\xbb\x6a\x5b\x59\x14\x80\xe1\x5a\xf3\x1c\x33\x9d\x0a\xad\xdb\x14\x62\x18\xc8\x0d\x92\x26\x2f\x10\x8c\x49\x91\x32\x97\x22\x79\xff\x80\x6f\x91\xf6\x27\xc9\x6a\xcd\x01\x25\x5e\xda\xfc\x3e\xeb\x7c\x2e\xce\xed\xfb\xfd\xe6\xef\x8f\x9f\xbf\x7e\xd9\xfc\xf3\xe1\xdb\x8f\x5f\x3f\x3f\xf5\x7e\xb7\xbd\xbb\x6e\xfe\xeb\xfd\xbf\xdb\xdc\xd6\xb6\xff\x5f\xbf\x8c\x9b\x75\x92\x4c\x6a\x99\xc4\x76\xc7\x64\xed\x04\x9d\xa0\x93\x74\x92\x4e\xd2\xc9\xa5\x13\x77\x2b\xae\x93\x60\x92\x4c\xd6\xce\xba\x57\xb0\x57\xb0\x57\xb0\x57\xb0\x57\xb0\x57\xb0\x57\x2c\x7b\xc5\x03\xdd\x3a\x09\x26\xc9\x64\xed\x04\x9d\xa0\x13\x74\x82\x4e\xd2\x49\x3a\x49\x67\xdd\x6b\xf5\x0a\xbc\x02\xaf\xc0\x2b\xf0\x0a\xbc\x02\xaf\xc0\x2b\xf0\x0a\xbc\x02\xaf\xc0\x2b\xf1\x4a\xbc\x12\xaf\xc4\x2b\xf1\x4a\xbc\x12\xaf\xc4\x2b\xf1\x4a\xbc\x12\xaf\xc4\x2b\xf1\x4a\xbc\x12\xaf\xc4\x2b\xf1\x4a\xbc\x12\xaf\xc4\x2b\xf1\x4a\xbc\x12\xaf\xc4\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\x79\xf2\x7a\xf7\xe6\xfb\xc3\x1b\xc8\x89\x57\xc5\xe3\x2f\x83\xe3\xc9\x64\x4d\xde\xaf\x78\x3c\x59\x3b\x41\x27\xe8\x24\x9d\xa4\x93\x74\xd6\x15\x1f\xe9\x8e\x27\xc1\x24\x99\xac\x9d\x75\xaf\x60\xaf\x60\xaf\x60\xaf\x60\xaf\x60\xaf\x60\xaf\x95\xee\xcf\xab\xe2\xf1\x24\x98\x24\x93\xb5\x13\x74\x82\x4e\xd0\x09\x3a\x49\x27\xe9\x24\x9d\x75\xaf\xd5\x2b\xf0\x0a\xbc\x02\xaf\xc0\x2b\xf0\x0a\xbc\x02\xaf\xc0\x2b\xf0\x0a\xbc\x02\xaf\xc4\x2b\xf1\x4a\xbc\x12\xaf\xc4\x2b\xf1\x4a\xbc\x12\xaf\xc4\x2b\xf1\x4a\xbc\x12\xaf\xc4\x2b\xf1\x4a\xbc\x12\xaf\xc4\x2b\xf1\x4a\xbc\x12\xaf\xc4\x2b\xf1\x4a\xbc\x12\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x1e\x5f\x15\xff\xba\x7d\xbb\xdf\xbc\x7a\x7d\xbb\xdb\xdc\x5f\xf1\xf4\x19\x9b\xdd\xc1\x15\x07\x3f\xc7\xc1\xe7\xe1\xff\xe2\xe2\x79\xbb\x71\xb2\x67\xed\xb8\xbb\x3b\x73\x9d\xbf\xbf\xeb\xce\x3f\xd7\x7f\x59\xcf\xc7\x7f\x2f\x3f\x9f\xe7\xcf\x3f\xd3\x7f\xfc\x43\x8a\x8b\x37\x71\x7a\xd1\xf5\x17\x9e\x5b\xfd\xf2\x8d\x9d\x5f\xc8\xf2\x35\xcc\xa7\x7b\xe7\xcf\x5f\xdf\x7f\x19\xcf\xe7\xfc\xdd\x5d\xbe\xbf\x73\xe7\xaf\xec\xff\x0e\x00\x00\xff\xff\x13\x11\xdc\xaf\xf1\x18\x00\x00")

func stimuli0_similarityTest_ab_psTsvBytes() ([]byte, error) {
	return bindataRead(
		_stimuli0_similarityTest_ab_psTsv,
		"stimuli/0%_similarity/test_ab_ps.tsv",
	)
}

func stimuli0_similarityTest_ab_psTsv() (*asset, error) {
	bytes, err := stimuli0_similarityTest_ab_psTsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stimuli/0%_similarity/test_ab_ps.tsv", size: 6385, mode: os.FileMode(420), modTime: time.Unix(1596537485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stimuli0_similarityTrain_ab_psTsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd6\x3d\x6e\x5d\x65\x10\xc7\xe1\xda\xac\x03\x3a\x17\x9e\xff\xcc\x50\x58\x08\x89\x2f\x09\x1a\x36\x80\x22\x8b\x82\x92\x8f\x02\xf6\x8f\x94\xc4\x89\xfd\x3e\xb9\xd7\x5e\x40\x74\xa4\x6b\x7b\xee\xd1\x4f\x67\xce\xe3\xe2\x7d\xf8\xf9\xfe\xe6\xcb\x5f\x7f\xff\xf3\x8f\x9b\xaf\x7e\xf9\xeb\x9f\xff\xfe\xfd\x6d\xee\xef\x6e\xdf\x5e\x6f\xbe\x99\xfb\xaf\x6f\x73\xdb\xb7\xf3\xed\xf9\x65\xbd\x39\x27\x61\xd2\xc7\xa4\x6e\xef\x98\x9c\x9d\xa2\x53\x74\x42\x27\x74\x42\x27\x47\xa7\xde\xae\x78\x4e\x8a\x49\x98\x9c\x9d\x73\xaf\x62\xaf\x62\xaf\x62\xaf\x62\xaf\x62\xaf\x62\xaf\x3a\xf6\xaa\xf7\x74\xe7\xa4\x98\x84\xc9\xd9\x29\x3a\x45\xa7\xe8\x14\x9d\xd0\x09\x9d\xd0\x39\xf7\x3a\xbd\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x2a\xbc\x0a\xaf\xc2\xab\xf0\x0a\x5e\xc1\x2b\x78\x05\xaf\xe0\x15\xbc\x82\x57\xf0\x0a\x5e\xc1\x2b\x78\x05\xaf\xe0\x15\xbc\x82\x57\xf0\x0a\x5e\xc1\x2b\x78\x05\xaf\xe0\x15\xbc\x82\x57\xf0\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x6a\xbc\x1a\xaf\xc6\xab\xf1\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x1a\xbc\x06\xaf\xc1\x6b\xf0\x5a\xbc\x16\xaf\xc5\x6b\xf1\x5a\xbc\x16\xaf\xc5\x6b\xf1\x5a\xbc\x16\xaf\xc5\x6b\xf1\x5a\xbc\x16\xaf\xc5\x6b\xf1\x5a\xbc\x16\xaf\xc5\x6b\xf1\x5a\xbc\x16\xaf\xc5\x6b\x3f\x78\xfd\xf4\xc3\xdf\xef\x4f\x20\x9f\x38\x2a\x3e\xff\xb2\xb8\x3d\x4c\xce\xe4\xbb\x15\x9f\x4f\xce\x4e\xd1\x29\x3a\xa1\x13\x3a\xa1\x73\xae\xf8\x48\xf7\x7c\x52\x4c\xc2\xe4\xec\x9c\x7b\x15\x7b\x15\x7b\x15\x7b\x15\x7b\x15\x7b\x15\x7b\x9d\x74\x1f\x8f\x8a\xcf\x27\xc5\x24\x4c\xce\x4e\xd1\x29\x3a\x45\xa7\xe8\x84\x4e\xe8\x84\xce\xb9\xd7\xe9\x55\x78\x15\x5e\x85\x57\xe1\x55\x78\x15\x5e\x85\x57\xe1\x55\x78\x15\x5e\x85\x57\xf0\x0a\x5e\xc1\x2b\x78\x05\xaf\xe0\x15\xbc\x82\x57\xf0\x0a\x5e\xc1\x2b\x78\x05\xaf\xe0\x15\xbc\x82\x57\xf0\x0a\x5e\xc1\x2b\x78\x05\xaf\xe0\x15\xbc\x82\x57\xe3\xd5\x78\x35\x5e\x8d\x57\xe3\xd5\x78\x35\x5e\x8d\x57\xe3\xd5\x78\x35\x5e\x8d\x57\xe3\xd5\x78\x35\x5e\x8d\x57\xe3\xd5\x78\x35\x5e\x8d\x57\xe3\xd5\x78\x35\x5e\x8d\xd7\xe0\x35\x78\x0d\x5e\x83\xd7\xe0\x35\x78\x0d\x5e\x83\xd7\xe0\x35\x78\x0d\x5e\x83\xd7\xe0\x35\x78\x0d\x5e\x83\xd7\xe0\x35\x78\x0d\x5e\x83\xd7\xe0\x35\x78\x0d\x5e\x83\xd7\xe2\xb5\x78\x2d\x5e\x8b\xd7\xe2\xb5\x78\x2d\x5e\x8b\xd7\xe2\xb5\x78\x2d\x5e\x8b\xd7\xe2\xb5\x78\x2d\x5e\x8b\xd7\xe2\xb5\x78\x2d\x5e\x8b\xd7\xe2\xb5\x78\x2d\x5e\x8f\x47\xc5\x2f\x1e\x7e\xbc\xbf\xf9\xee\xfb\x87\xbb\x9b\x77\x57\x7d\xf8\xac\x9b\xbb\x27\x57\x3d\xf9\xbb\x9e\x7c\x3e\xfd\xad\xae\xde\x6f\xb7\x3e\xd9\xb3\xf6\xbc\x7b\xe9\xe7\xe5\xe7\x7b\xdd\xfd\x2f\xf5\x3f\xbf\x9f\xab\xfd\xc7\x7f\xa4\x7a\xc5\x4b\x7c\xe9\x05\x5e\x5a\xfd\xfa\x83\x5d\x5e\xc8\xf2\xb5\xa7\x7c\xe9\xf9\x2e\xdd\xff\xfa\xfe\xe7\xf7\x73\xa5\xff\x7f\x00\x00\x00\xff\xff\xeb\xcf\x81\x8b\xf1\x18\x00\x00")

func stimuli0_similarityTrain_ab_psTsvBytes() ([]byte, error) {
	return bindataRead(
		_stimuli0_similarityTrain_ab_psTsv,
		"stimuli/0%_similarity/train_ab_ps.tsv",
	)
}

func stimuli0_similarityTrain_ab_psTsv() (*asset, error) {
	bytes, err := stimuli0_similarityTrain_ab_psTsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stimuli/0%_similarity/train_ab_ps.tsv", size: 6385, mode: os.FileMode(420), modTime: time.Unix(1596537426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stimuli/0%_similarity/test_ab_ps.tsv":  stimuli0_similarityTest_ab_psTsv,
	"stimuli/0%_similarity/train_ab_ps.tsv": stimuli0_similarityTrain_ab_psTsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stimuli": &bintree{nil, map[string]*bintree{
		"0%_similarity": &bintree{nil, map[string]*bintree{
			"test_ab_ps.tsv":  &bintree{stimuli0_similarityTest_ab_psTsv, map[string]*bintree{}},
			"train_ab_ps.tsv": &bintree{stimuli0_similarityTrain_ab_psTsv, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
